generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?   // For manual registration
  lastName      String?   // For manual registration
  name          String?   // Optional, populated by Google or combined manually
  email         String?   @unique
  password      String?   // For manual registration
  emailVerified DateTime?
  image         String?
  games         Game[]    // Relation to games
  chats         Chat[]    // Relation to chats
  accounts      Account[] // Relation to accounts
  sessions      Session[] // Relation to sessions
  isPro         Boolean   @default(false) // Subscription status
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum GameType {
  mcq
  open_ended
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[] // Relation to questions
  topic       String
  gameType    GameType
  timeStarted DateTime
  timeEnded   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  gameId            String
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  options           Json?    // For MCQ questions
  percentageCorrect Float?   // For open-ended questions
  isCorrect         Boolean? // For MCQ questions
  questionType      GameType
  userAnswer        String?
  createdAt         DateTime @default(now())

  @@index([gameId])
}

model topic_count {
  id        String   @id @default(cuid())
  topic     String   @unique
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfUrl    String?   // Optional URL for associated PDF
  name      String?   // Name of the chat, references the first message content
  messages  Message[] // Relation to messages
  embeddings PDFEmbedding[] // Relation to embeddings (newly added)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    String   // "user" or "bot"
  content   String   // The message content
  createdAt DateTime @default(now())

  @@index([chatId])
}

model PDFEmbedding {
  id         String   @id @default(cuid())
  chatId     String   // Links to the chat that the embedding is associated with
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  pineconeId String   // ID of the vector in Pinecone
  pdfUrl     String?  // URL of the PDF if applicable
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chatId])
}
